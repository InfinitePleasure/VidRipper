# -*- coding: utf-8 -*-
from builtins import len

import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, pyqtSignal, QThread
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QWidget, QFileDialog

import EventListener
from VidRipper import FileManagement


# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):
        while self._run_flag:
            self.msleep(100)
            if 0 < len(EventListener.current_frames) and EventListener.index < len(EventListener.current_frames):
                self.change_pixmap_signal.emit(EventListener.current_frames[EventListener.index])

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()


class Ui_MainWindow(QWidget):
    def setupUi(self, main_window):
        main_window.setObjectName("MainWindow")
        main_window.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.exportBtn = QtWidgets.QPushButton(self.centralwidget)
        self.exportBtn.setGeometry(QtCore.QRect(1080, 600, 180, 80))
        font = QtGui.QFont()
        font.setFamily("Fixedsys")
        self.exportBtn.setFont(font)
        self.exportBtn.setObjectName("pushButton")
        self.exportBtn.clicked.connect(EventListener.export)
        self.importBtn = QtWidgets.QPushButton(self.centralwidget)
        self.importBtn.setGeometry(QtCore.QRect(20, 10, 200, 680))
        font = QtGui.QFont()
        font.setFamily("Fixedsys")
        self.importBtn.setFont(font)
        self.importBtn.setObjectName("pushButton_2")
        self.importBtn.clicked.connect(self.import_)
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(1080, 120, 180, 25))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.spinBox.setFont(font)
        self.spinBox.setObjectName("spinBox")
        self.spinBox.valueChanged.connect(self.val)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1080, 90, 181, 31))
        self.label.setObjectName("label")
        self.exportAll = QtWidgets.QCheckBox(self.centralwidget)
        self.exportAll.setGeometry(QtCore.QRect(1080, 10, 180, 30))
        self.exportAll.setObjectName("checkBox")
        self.exportAll.clicked.connect(EventListener.all_func)
        self.exportMult = QtWidgets.QCheckBox(self.centralwidget)
        self.exportMult.setGeometry(QtCore.QRect(1080, 55, 180, 30))
        self.exportMult.setObjectName("checkBox_2")
        self.exportMult.clicked.connect(EventListener.mult_func)
        main_window.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(main_window)
        self.statusbar.setObjectName("statusbar")
        main_window.setStatusBar(self.statusbar)

        self.retranslateUi(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)
        main_window.show()

        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()

    def closeEvent(self, event):
        self.thread.stop()

    def retranslateUi(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "VidRipper"))
        self.exportBtn.setText(_translate("MainWindow", "Exporter l\'image"))
        self.importBtn.setText(_translate("MainWindow", "Importer une vidéo"))
        self.label.setText(_translate("MainWindow", "Numéro de l\'image"))
        self.exportAll.setText(_translate("MainWindow", "Extraire toutes les images \n"
                                                        "de la vidéo"))
        self.exportMult.setText(_translate("MainWindow", "Extraire les / une image de \n"
                                                         "plussieurs vidéo"))

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.image_label.setPixmap(qt_img)

    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        self.image_label.setGeometry(QtCore.QRect(230, 10, 850, 700))
        self.image_label.alignment()
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(850, 700, QtCore.Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

    def val(self):
        EventListener.setIndex(self.spinBox.value())

    @pyqtSlot()
    def import_(self):
        if EventListener.mult:
            files = openFileNamesDialog()
            FileManagement.files.clear()
            FileManagement.files = files
        else:
            file = openFileNameDialog()
            FileManagement.files.clear()
            FileManagement.files.append(file)
            EventListener.current_frames = FileManagement.get_frames()
            self.spinBox.setMaximum(len(EventListener.current_frames))


def openFileNameDialog():
    options = QFileDialog.Options()
    options |= QFileDialog.DontUseNativeDialog
    fileName, _ = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "",
                                              "All Files (*);;Vidéo Files (*.mp4 *.mov *.avi)", options=options)
    return fileName


def openFileNamesDialog():
    options = QFileDialog.Options()
    options |= QFileDialog.DontUseNativeDialog
    files, _ = QFileDialog.getOpenFileNames(None, "QFileDialog.getOpenFileNames()", "",
                                            "All Files (*);;Vidéo Files (*.mp4 *.mov *.avi)", options=options)
    return files
